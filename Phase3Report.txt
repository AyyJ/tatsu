CSE 135 Phase 3 Report
Arthur de Jesus (adejesus@ucsd.edu)  and Mandeep Sran (msran@ucsd.edu)


Assumptions:
The assumption that rows would be ordered by top-k with respect to states
The indices created by primary keys were sufficient when creating precomputed tables
Precomputed tables were broken up by filtered sales (by state and product), filtered
 states, products, and then top sales.

Precomputed Tables
This was completed by doing the aggregation within this new insert instead of at runtime
when we ran the query in the main report.
We then inserted the data from those existing precomputed tables
After doing this action, we noticed a significant performance boost as compared to phase 2.

Shortcomings
After looking through the code, it’s quite apparent there’s not much complete. We spent
a majority of our time learning Javascript, AJAX and JSON. A lot of the time was spent
in a different branch off of our Github repository trying to perfect this. Ultimately,
we could not complete this section of the phase and were only able to deliver the
precomputed tables. Within this submitted form, we’ve included a folder titled (JSON)
with the appropriate JSON files from that branch.
We worked hard to get the project as near finished as possible, but the following
functionality was not implemented
    Coloring of updated cells with red
    Coloring of entire column with purple if it was no longer in the top k
    AJAX + Javascript support for the refresh button
    Use of TRIGGER to add new purchases to precomputed tables
This is no doubt upsetting to you as a grader, but is exponentially more upsetting to us.
We understand that this isn’t acceptable to turn in as a final project, but do want to say
that we did not just forget about this project. We continuously and tirelessly worked to
figure out how to pull of this phase.
Our phase 2 performance was abysmal to say the least and since this project relied heavily
on phase 2, we struggled. After the queries were released, we got to work with understanding
 the new technologies required for this project, but it was unfruitful.


CREATE TABLE filteredProdSales(
  product_id INTEGER,
  product_name TEXT,
  category_name TEXT,
  totalsale BIGINT
);

CREATE TABLE filteredStateSales(
  state_id INTEGER,
  state_name TEXT,
  category_name TEXT,
  totalsale BIGINT
);

CREATE TABLE filteredStateTopK(
  state_name TEXT,
  product_name TEXT,
  category_name TEXT,
  total BIGINT
);


CREATE TABLE oldProducts (
  product_id INTEGER,
  product_name TEXT,
  totalsale BIGINT
    );


CREATE TABLE newProducts (
  product_id INTEGER,
  product_name TEXT,
  totalsale BIGINT
    );

CREATE TABLE filteredOldProducts (
  product_id INTEGER,
  product_name TEXT,
  totalsale BIGINT
    );


CREATE TABLE filteredNewProducts (
  product_id INTEGER,
  product_name TEXT,
  totalsale BIGINT
    );



CREATE TABLE topSales(
  product_id INTEGER,
  product_name TEXT,
  totalsale BIGINT
);

INSERT INTO topSales(
  SELECT prod.id as product_id, prod.product_name AS product_name, COALESCE(totalsale, 0) AS total
  FROM product prod LEFT OUTER JOIN
    (SELECT product_id, SUM(totalsale) AS totalsale
     FROM
       (SELECT prod2.product_name AS product_name, p.person_name AS person_name, prod2.id AS product_id, (prod2.price * pc.quantity) AS totalsale
        FROM person p, product prod2, shopping_cart sc, products_in_cart pc
        WHERE p.id = sc.person_id
              AND sc.id = pc.cart_id
              AND sc.is_purchased = 'true'
              AND pc.product_id = prod2.id)
         AS custPurchases
     GROUP BY product_id)
      AS salesMade
      ON prod.id = product_id
);

INSERT INTO filteredProdSales(
  SELECT prod.id as product_id, prod.product_name AS product_name, salesMade.category_name AS category_name, COALESCE(totalsale, 0) AS total
  FROM product prod LEFT OUTER JOIN
    (SELECT product_id, category_name, SUM(totalsale) AS totalsale
     FROM
       (SELECT prod2.product_name AS product_name, p.person_name AS person_name, prod2.id AS product_id, cat.category_name, (prod2.price * pc.quantity) AS totalsale
        FROM person p, product prod2, shopping_cart sc, products_in_cart pc, category cat
        WHERE p.id = sc.person_id
              AND sc.id = pc.cart_id
              AND sc.is_purchased = 'true'
              AND pc.product_id = prod2.id
              AND prod2.category_id = cat.id)
         AS custPurchases
     GROUP BY product_id, category_name)
      AS salesMade
      ON prod.id = product_id
);

INSERT INTO oldProducts(
     SELECT product_id,product_name, totalsale
     FROM topSales
     ORDER BY totalsale DESC
     LIMIT 50
     );
INSERT INTO filteredOldProducts(
     SELECT product_id,product_name, totalsale
     FROM filteredProdSales
     ORDER BY totalsale DESC
     LIMIT 50
     );

INSERT INTO newProducts(
     SELECT product_id,product_name, totalsale
     FROM topSales
     ORDER BY totalsale DESC
     LIMIT 50

    );

INSERT INTO filteredNewProducts(
     SELECT product_id,product_name, totalsale
     FROM filteredProdSales
     ORDER BY totalsale DESC
     LIMIT 50

    );

CREATE TABLE stateSales(
  state_id INTEGER,
  state_name TEXT,
  totalsale BIGINT
);

INSERT INTO stateSales(
  SELECT allstates.id AS state_id, allstates.state_name AS state_name, COALESCE(total,0) AS totalsale
  FROM
    (SELECT id as id, state_name as state_name FROM state) AS allstates
    LEFT OUTER JOIN
    (SELECT st.state_name AS state_name, SUM(pc.quantity * pc.price) AS total
    FROM shopping_cart sc2, products_in_cart pc, product p2, person p, state st
    WHERE pc.cart_id = sc2.id
    AND pc.product_id = p2.id
    AND sc2.person_id = p.id
    AND p.state_id = st.id
    GROUP BY st.state_name
    ) AS purchasesperstate
    ON allstates.state_name = purchasesperstate.state_name
  ORDER BY totalsale desc
);

INSERT INTO filteredStateSales(
  SELECT allstates.id AS state_id, allstates.state_name AS state_name, purchasesperstate.category_name AS category_name, COALESCE(total,0) AS total_sale
  FROM
    (SELECT id as id, state_name as state_name FROM state) AS allstates
    LEFT OUTER JOIN
    (SELECT st.state_name AS state_name, cat.category_name AS category_name, SUM(pc.quantity * pc.price) AS total
    FROM shopping_cart sc2, products_in_cart pc, product p2, person p, state st, category cat
    WHERE pc.cart_id = sc2.id
    AND pc.product_id = p2.id
    AND sc2.person_id = p.id
    AND p.state_id = st.id
    AND p2.category_id = cat.id
    GROUP BY st.state_name, cat.category_name
    ) AS purchasesperstate
    ON allstates.state_name = purchasesperstate.state_name
  ORDER BY total_sale desc
);


CREATE TABLE stateTopK(
  state_name TEXT,
  product_name TEXT,
  total BIGINT
);

INSERT INTO stateTopK(
  SELECT prodsAndStates.state_name AS state_name, prodsAndStates.product_name AS product_name, COALESCE(total,0) AS total
  FROM
    (SELECT state_name AS state_name, product_name AS product_name
    FROM product, state) AS prodsAndStates
    LEFT OUTER JOIN
      (SELECT st.state_name AS state_name, p2.product_name AS product_name, SUM(pc.quantity * pc.price) AS total
      FROM shopping_cart sc2, products_in_cart pc, product p2, person p, state st
      WHERE pc.cart_id = sc2.id
      AND pc.product_id = p2.id
      AND sc2.person_id = p.id
      AND p.state_id = st.id
      GROUP BY (st.state_name,p2.product_name)
      ORDER BY p2.product_name
    ) AS salesMade
    ON prodsAndStates.state_name = salesMade.state_name
    AND prodsAndStates.product_name = salesMade.product_name
);

INSERT INTO filteredStateTopK(
  SELECT prodsAndStates.state_name AS state_name, prodsAndStates.product_name AS product_name, category_name, COALESCE(total,0) AS total
  FROM
    (SELECT state_name AS state_name, product_name AS product_name
    FROM product, state) AS prodsAndStates
    LEFT OUTER JOIN
      (SELECT st.state_name AS state_name, p2.product_name AS product_name, cat.category_name, SUM(pc.quantity * pc.price) AS total
      FROM shopping_cart sc2, products_in_cart pc, product p2, person p, state st, category cat
      WHERE pc.cart_id = sc2.id
      AND pc.product_id = p2.id
      AND sc2.person_id = p.id
      AND p.state_id = st.id
      AND p2.category_id = cat.id
      GROUP BY (st.state_name,p2.product_name, cat.category_name)
      ORDER BY p2.product_name
    ) AS salesMade
    ON prodsAndStates.state_name = salesMade.state_name
    AND prodsAndStates.product_name = salesMade.product_name
    ORDER BY total DESC
);
